package pt.isel

import org.cojen.maker.ClassMaker
import kotlin.reflect.KClass
/**
 * A YamlParser that uses Cojen Maker to generate a parser.
 */
open class YamlParserCojen<T : Any>(
    private val type: KClass<T>,
    private val nrOfInitArgs: Int)
: AbstractYamlParser<T>(type) {

    companion object {
        private val yamlParsers: MutableMap<String, YamlParserCojen<*>> = mutableMapOf()

        private fun parserName(type: KClass<*>, nrOfInitArgs: Int): String {
            return "YamlParser${type.simpleName}$nrOfInitArgs"
        }
        /**
         * Creates a YamlParser for the given type using Cojen Maker if it does not already exist.
         * Keep it in an internal cache.
         */
        fun <T : Any> yamlParser(type: KClass<T>, nrOfInitArgs: Int = type.constructors.first().parameters.size): AbstractYamlParser<T> {
            return yamlParsers.getOrPut(parserName(type, nrOfInitArgs)) {
                YamlParserCojen(type, nrOfInitArgs)
                    .buildYamlParser()
                    .finish()
                    .getConstructor(KClass::class.java, Integer::class.java)
                    .newInstance(type, nrOfInitArgs) as YamlParserCojen<*>
            } as YamlParserCojen<T>
        }
    }
    /**
     * Used to get a parser for other Type using the same parsing approach.
     */
    override fun <T : Any> yamlParser(type: KClass<T>) = YamlParserCojen.yamlParser(type)

    /**
     * Do not change this method in YamlParserCojen.
     */
    override fun newInstance(args: Map<String, Any>): T {
        throw UnsupportedOperationException("This method is overridden in a subclass dynamically generated by buildYamlParser() function!")
    }

    private fun buildYamlParser() : ClassMaker {
        return ClassMaker
            .begin("YamlParser${type.simpleName}${nrOfInitArgs}")
            .public_()
            .extend(YamlParserCojen::class.java)
            .apply {
                addConstructor(KClass::class.java, Integer::class.java).public_().also { ctor ->
                    ctor.invokeSuperConstructor(ctor.param(0), ctor.param(1))
                }
                addParseMethod(type)
            }

    }

    private fun ClassMaker.addParseMethod(destType: KClass<T>) {
        // get the right constructor
        // TODO: make it work for cases where there are multiple constructors with the same number of arguments
        val destInit = type
            .java
            .constructors.first {
                it.parameters.size == nrOfInitArgs
            }

        // get the type of each parameter
        val args = destInit.parameters.associate { it.name to it.type }

        // add the parse method
        addMethod(Any::class.java, "newInstance", Map::class.java)
            .public_()
            .apply {
                val argMap = param(0).cast(Map::class.java)
                val argValues = args.map { (k, v) ->
                    when {
                        v == String::class.java || v.isPrimitive ->
                            `var`(v).invoke("valueOf", argMap.invoke("get", k).cast(String::class.java))
                        v == List::class.java -> TODO("Not implemented yet")
                        v == Sequence::class.java -> TODO("Not implemented yet")
                        else ->
                            YamlParserCojen.yamlParser(v.kotlin)::class.java
                                .getDeclaredMethod("newInstance", Map::class.java)
                                .invoke(YamlParserCojen.yamlParser(v.kotlin), argMap.invoke("get", k).cast(Map::class.java))
                    }
                }


                val cls = this.new_(destType.java, *argValues.toTypedArray())
                this.return_(cls)
            }
    }
}

